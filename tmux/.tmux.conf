# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'
set -g @plugin 'tmux-plugins/tmux-resurrect'
# install plagins = prefix + I
set -g @plugin 'jaclu/tmux-menus'
# show menues = <prefix> \
set -g @menus_trigger m

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

#=================================================setup
#max lines in history
set -g history-limit 9999

#=================================================keys=====================================

# pane_navigation_bindings() {
	bind-key h   select-pane -L
	bind-key C-h select-pane -L
	bind-key j   select-pane -D
	bind-key C-j select-pane -D
	bind-key k   select-pane -U
	bind-key C-k select-pane -U
	bind-key l   select-pane -R
	bind-key C-l select-pane -R

# window_move_bindings() {
	bind-key -r "<" swap-window -d -t -1
	bind-key -r ">" swap-window -d -t +1

# pane_resizing_bindings() {
	bind-key -r H resize-pane -L 5
	bind-key -r J resize-pane -D 5
	bind-key -r K resize-pane -U 5
	bind-key -r L resize-pane -R 5

# pane_split_bindings() {
	bind-key "|" split-window -h -c "#{pane_current_path}"
	bind-key "\\" split-window -fh -c "#{pane_current_path}"
	bind-key "-" split-window -v -c "#{pane_current_path}"
	bind-key "_" split-window -fv -c "#{pane_current_path}"
	bind-key "%" split-window -h -c "#{pane_current_path}"
	bind-key '"' split-window -v -c "#{pane_current_path}"
	bind-key v split-window -h
	unbind-key s
	bind-key s split-window -v
# vim-style-prefix() {
	set-option -g prefix C-a
	unbind-key C-a
	bind-key C-a send-prefix

# improve_new_window_binding() {
	bind-key "n" new-window -c "#{pane_current_path}"
	# use C-a, since it's on the home row and easier to hit than C-b
	bind-key -n C-Tab next-window
	bind-key -n C-S-Tab previous-window
	unbind-key C-S-t
	bind-key -n C-S-t new-window

#-------------------------------------------------------#
# active window highlight
#set-window-option -g window-status-current-bg red
# Pane colours
#-------------------------------------------------------#
# set active-inactive window styles
set -g window-style 'fg=colour247,bg=colour234'
set -g window-active-style 'fg=default,bg=black'

set -g pane-border-style fg=green
set -g pane-active-border-style "bg=default fg=magenta"

# # Pane border
# set -g pane-border-bg default
# set -g pane-border-fg colour238

# # Active pane border
# set -g pane-active-border-bg default
# set -g pane-active-border-fg blue
# set -g status-style bg=green,fg=magenta,bold

#-------------------------------------------------------#
#
#-------------------------------------------------------#
# vim style tmux config

set -g status-right '#H'



# set -g base-index 1
# 
# # Easy config reload
# bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."
# 
# # vi is good
# setw -g mode-keys vi
# 
# # mouse behavior
# setw -g mouse on
# 
# set-option -g default-terminal screen-256color
# 
# bind-key : command-prompt
# bind-key r refresh-client
# bind-key L clear-history
# 
# bind-key space next-window
# bind-key bspace previous-window
# bind-key enter next-layout
# 
# # use vim-like keys for splits and windows
# bind-key v split-window -h
# bind-key s split-window -v
# bind-key h select-pane -L
# bind-key j select-pane -D
# bind-key k select-pane -U
# bind-key l select-pane -R
# 
# # smart pane switching with awareness of vim splits
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
# bind -n 'C-\' run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
# bind C-l send-keys 'C-l'
# 
# bind-key C-o rotate-window
# 
# bind-key + select-layout main-horizontal
# bind-key = select-layout main-vertical
# 
# set-window-option -g other-pane-height 25
# set-window-option -g other-pane-width 80
# set-window-option -g display-panes-time 1500
# set-window-option -g window-status-current-style fg=magenta
# 
# bind-key a last-pane
# bind-key q display-panes
# bind-key c new-window
# bind-key t next-window
# bind-key T previous-window
# 
# bind-key [ copy-mode
# bind-key ] paste-buffer
# 
# # Setup 'v' to begin selection as in Vim
# bind-key -T copy-mode-vi v send -X begin-selection
# bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
## Use vim keybindings in copy mode
#=========================disable mouse
#set-option -g mouse on
setw -g mode-keys vi
set-option -s set-clipboard off
bind P paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X rectangle-toggle
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -se c -i'
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'xclip -se c -i'
# Now you can enter copy mode normally with CTRL+B and [.
# 1. Navigate the copy mode with vi-like-key bindings (u for up, d for down, etc.)
# 2. Hit v to start copying.
# 3. Press y or Enter to copy the text into the tmux buffer. This automatically cancels copy mode.
# 4. Paste into the buffer with <prefix>+P (make sure that itâ€™s uppercase P).
# 
# # Update default binding of `Enter` to also use copy-pipe
# unbind -T copy-mode-vi Enter
# bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# 
# # Status Bar
# set-option -g status-interval 1
# set-option -g status-style bg=black
# set-option -g status-style fg=white
# set -g status-left '#[fg=green]#H #[default]'
# set -g status-right '%a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d'
# 
# set-option -g pane-active-border-style fg=yellow
# set-option -g pane-border-style fg=cyan
# 
# # Set window notifications
# setw -g monitor-activity on
# set -g visual-activity on
# 
# # Enable native Mac OS X copy/paste
# set-option -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'"
# 
# # Allow the arrow key to be used immediately after changing windows
# set-option -g repeat-time 0
